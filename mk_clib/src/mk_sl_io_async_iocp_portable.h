#ifndef mk_include_guard_mk_sl_io_async_iocp_portable
#define mk_include_guard_mk_sl_io_async_iocp_portable


#include "mk_lang_jumbo.h"
#include "mk_lang_nodiscard.h"
#include "mk_lang_noexcept.h"
#include "mk_lang_types.h"
#include "mk_lib_mt_thread.h"


struct mk_sl_io_async_reader_file_portable_s;
typedef struct mk_sl_io_async_reader_file_portable_s mk_sl_io_async_reader_file_portable_t;
typedef mk_sl_io_async_reader_file_portable_t const mk_sl_io_async_reader_file_portable_ct;
typedef mk_sl_io_async_reader_file_portable_t* mk_sl_io_async_reader_file_portable_pt;
typedef mk_sl_io_async_reader_file_portable_t const* mk_sl_io_async_reader_file_portable_pct;

struct mk_sl_io_async_reader_file_iorp_portable_s;
typedef struct mk_sl_io_async_reader_file_iorp_portable_s mk_sl_io_async_reader_file_iorp_portable_t;
typedef mk_sl_io_async_reader_file_iorp_portable_t const mk_sl_io_async_reader_file_iorp_portable_ct;
typedef mk_sl_io_async_reader_file_iorp_portable_t* mk_sl_io_async_reader_file_iorp_portable_pt;
typedef mk_sl_io_async_reader_file_iorp_portable_t const* mk_sl_io_async_reader_file_iorp_portable_pct;

struct mk_sl_io_async_writer_file_portable_s;
typedef struct mk_sl_io_async_writer_file_portable_s mk_sl_io_async_writer_file_portable_t;
typedef mk_sl_io_async_writer_file_portable_t const mk_sl_io_async_writer_file_portable_ct;
typedef mk_sl_io_async_writer_file_portable_t* mk_sl_io_async_writer_file_portable_pt;
typedef mk_sl_io_async_writer_file_portable_t const* mk_sl_io_async_writer_file_portable_pct;

struct mk_sl_io_async_writer_file_iorp_portable_s;
typedef struct mk_sl_io_async_writer_file_iorp_portable_s mk_sl_io_async_writer_file_iorp_portable_t;
typedef mk_sl_io_async_writer_file_iorp_portable_t const mk_sl_io_async_writer_file_iorp_portable_ct;
typedef mk_sl_io_async_writer_file_iorp_portable_t* mk_sl_io_async_writer_file_iorp_portable_pt;
typedef mk_sl_io_async_writer_file_iorp_portable_t const* mk_sl_io_async_writer_file_iorp_portable_pct;


union mk_sl_io_async_iocp_portable_file_data_u
{
	mk_lang_types_void_pt m_ptr;
	mk_sl_io_async_reader_file_portable_pt m_reader;
	mk_sl_io_async_writer_file_portable_pt m_writer;
};
typedef union mk_sl_io_async_iocp_portable_file_data_u mk_sl_io_async_iocp_portable_file_data_t;

struct mk_sl_io_async_iocp_portable_file_s
{
	mk_sl_io_async_iocp_portable_file_data_t m_data;
};
typedef struct mk_sl_io_async_iocp_portable_file_s mk_sl_io_async_iocp_portable_file_t;

union mk_sl_io_async_iocp_iorp_data_portable_u
{
	mk_lang_types_void_pt m_ptr;
	mk_sl_io_async_reader_file_iorp_portable_pt m_reader;
	mk_sl_io_async_writer_file_iorp_portable_pt m_writer;
};
typedef union mk_sl_io_async_iocp_iorp_data_portable_u mk_sl_io_async_iocp_iorp_data_portable_t;

struct mk_sl_io_async_iocp_iorp_portable_s
{
	mk_lang_types_sint_t m_kind;
	mk_sl_io_async_iocp_portable_file_t m_file;
	mk_sl_io_async_iocp_iorp_data_portable_t m_data;
};
typedef struct mk_sl_io_async_iocp_iorp_portable_s mk_sl_io_async_iocp_iorp_portable_t;
typedef mk_sl_io_async_iocp_iorp_portable_t const mk_sl_io_async_iocp_iorp_portable_ct;
typedef mk_sl_io_async_iocp_iorp_portable_t* mk_sl_io_async_iocp_iorp_portable_pt;
typedef mk_sl_io_async_iocp_iorp_portable_t const* mk_sl_io_async_iocp_iorp_portable_pct;

#if mk_lib_mt_thread_has
#define mk_lib_mt_ring_t_name mk_sl_io_async_iocp_portable_ring
#define mk_lib_mt_ring_t_element mk_sl_io_async_iocp_iorp_portable_t
#define mk_lib_mt_ring_t_count 32
#include "mk_lib_mt_ring_inl_fileh.h"
#undef mk_lib_mt_ring_t_name
#undef mk_lib_mt_ring_t_element
#undef mk_lib_mt_ring_t_count
#else
#define mk_sl_ring_t_name mk_sl_io_async_iocp_portable_ring
#define mk_sl_ring_t_element mk_sl_io_async_iocp_iorp_portable_t
#define mk_sl_ring_t_count 32
#include "mk_sl_ring_inl_fileh.h"
#undef mk_sl_ring_t_name
#undef mk_sl_ring_t_element
#undef mk_sl_ring_t_count
#endif

struct mk_sl_io_async_iocp_portable_s
{
	mk_sl_io_async_iocp_portable_ring_t m_iorps;
};
typedef struct mk_sl_io_async_iocp_portable_s mk_sl_io_async_iocp_portable_t;
typedef mk_sl_io_async_iocp_portable_t const mk_sl_io_async_iocp_portable_ct;
typedef mk_sl_io_async_iocp_portable_t* mk_sl_io_async_iocp_portable_pt;
typedef mk_sl_io_async_iocp_portable_t const* mk_sl_io_async_iocp_portable_pct;


mk_lang_nodiscard mk_lang_jumbo mk_lang_types_sint_t mk_sl_io_async_iocp_portable_construct(mk_sl_io_async_iocp_portable_pt const iocp, mk_lang_types_sint_t const concurrency) mk_lang_noexcept;
mk_lang_nodiscard mk_lang_jumbo mk_lang_types_sint_t mk_sl_io_async_iocp_portable_associate_r(mk_sl_io_async_iocp_portable_pt const iocp, mk_sl_io_async_reader_file_portable_pt const reader, mk_lang_types_usize_t const key) mk_lang_noexcept;
mk_lang_nodiscard mk_lang_jumbo mk_lang_types_sint_t mk_sl_io_async_iocp_portable_associate_w(mk_sl_io_async_iocp_portable_pt const iocp, mk_sl_io_async_writer_file_portable_pt const writer, mk_lang_types_usize_t const key) mk_lang_noexcept;
mk_lang_nodiscard mk_lang_jumbo mk_lang_types_sint_t mk_sl_io_async_iocp_portable_post_read_finished(mk_sl_io_async_iocp_portable_pt const iocp, mk_sl_io_async_reader_file_portable_pt const reader, mk_sl_io_async_reader_file_iorp_portable_pt const iorp) mk_lang_noexcept;
mk_lang_nodiscard mk_lang_jumbo mk_lang_types_sint_t mk_sl_io_async_iocp_portable_post_write_finished(mk_sl_io_async_iocp_portable_pt const iocp, mk_sl_io_async_writer_file_portable_pt const writer, mk_sl_io_async_writer_file_iorp_portable_pt const iorp) mk_lang_noexcept;
mk_lang_nodiscard mk_lang_jumbo mk_lang_types_sint_t mk_sl_io_async_iocp_portable_peek(mk_sl_io_async_iocp_portable_pt const iocp, mk_sl_io_async_iocp_iorp_portable_pt const iorp) mk_lang_noexcept;
mk_lang_nodiscard mk_lang_jumbo mk_lang_types_sint_t mk_sl_io_async_iocp_portable_wait(mk_sl_io_async_iocp_portable_pt const iocp, mk_sl_io_async_iocp_iorp_portable_pt const iorp) mk_lang_noexcept;
mk_lang_nodiscard mk_lang_jumbo mk_lang_types_sint_t mk_sl_io_async_iocp_portable_destroy(mk_sl_io_async_iocp_portable_pt const iocp) mk_lang_noexcept;

mk_lang_nodiscard mk_lang_jumbo mk_lang_types_sint_t mk_sl_io_async_iocp_iorp_portable_has(mk_sl_io_async_iocp_iorp_portable_pt const iorp, mk_lang_types_bool_pt const has) mk_lang_noexcept;
mk_lang_nodiscard mk_lang_jumbo mk_lang_types_sint_t mk_sl_io_async_iocp_iorp_portable_failed(mk_sl_io_async_iocp_iorp_portable_pt const iorp, mk_lang_types_bool_pt const failed) mk_lang_noexcept;
mk_lang_nodiscard mk_lang_jumbo mk_lang_types_sint_t mk_sl_io_async_iocp_iorp_portable_key(mk_sl_io_async_iocp_iorp_portable_pt const iorp, mk_lang_types_usize_pt const key) mk_lang_noexcept;
mk_lang_nodiscard mk_lang_jumbo mk_lang_types_sint_t mk_sl_io_async_iocp_iorp_portable_transfered(mk_sl_io_async_iocp_iorp_portable_pt const iorp, mk_lang_types_usize_pt const transfered) mk_lang_noexcept;
mk_lang_nodiscard mk_lang_jumbo mk_lang_types_sint_t mk_sl_io_async_iocp_iorp_portable_r(mk_sl_io_async_iocp_iorp_portable_pt const iorp, mk_sl_io_async_reader_file_iorp_portable_pt* const r) mk_lang_noexcept;
mk_lang_nodiscard mk_lang_jumbo mk_lang_types_sint_t mk_sl_io_async_iocp_iorp_portable_w(mk_sl_io_async_iocp_iorp_portable_pt const iorp, mk_sl_io_async_writer_file_iorp_portable_pt* const w) mk_lang_noexcept;


#if mk_lang_jumbo_want == 1
#include "mk_sl_io_async_iocp_portable.c"
#endif
#endif
