#include "mk_lang_constexpr.h"
#include "mk_lang_jumbo.h"
#include "mk_lang_nodiscard.h"
#include "mk_lang_noexcept.h"
#include "mk_lang_types.h"


#include "mk_sl_ring_inl_defd.h"


struct mk_sl_ring_inl_defd_s
{
	mk_lang_types_usize_t m_read;
	mk_lang_types_usize_t m_write;
	mk_sl_ring_inl_defd_elem_t m_arr[mk_sl_ring_inl_defd_capacity];
};
typedef struct mk_sl_ring_inl_defd_s mk_sl_ring_inl_defd_t;
typedef mk_sl_ring_inl_defd_t const mk_sl_ring_inl_defd_ct;
typedef mk_sl_ring_inl_defd_t* mk_sl_ring_inl_defd_pt;
typedef mk_sl_ring_inl_defd_t const* mk_sl_ring_inl_defd_pct;

typedef mk_sl_ring_inl_defd_elem_t const mk_sl_ring_inl_defd_elem_ct;
typedef mk_sl_ring_inl_defd_elem_t* mk_sl_ring_inl_defd_elem_pt;
typedef mk_sl_ring_inl_defd_elem_t const* mk_sl_ring_inl_defd_elem_pct;


mk_lang_nodiscard mk_lang_constexpr mk_lang_jumbo mk_lang_types_bool_t mk_sl_ring_inl_defd_ro_is_empty(mk_sl_ring_inl_defd_pct const ring) mk_lang_noexcept;
mk_lang_nodiscard mk_lang_constexpr mk_lang_jumbo mk_lang_types_bool_t mk_sl_ring_inl_defd_ro_is_full(mk_sl_ring_inl_defd_pct const ring) mk_lang_noexcept;
mk_lang_nodiscard mk_lang_constexpr mk_lang_jumbo mk_lang_types_usize_t mk_sl_ring_inl_defd_ro_get_size(mk_sl_ring_inl_defd_pct const ring) mk_lang_noexcept;
mk_lang_nodiscard mk_lang_constexpr mk_lang_jumbo mk_lang_types_usize_t mk_sl_ring_inl_defd_ro_get_capacity(mk_sl_ring_inl_defd_pct const ring) mk_lang_noexcept;
mk_lang_nodiscard mk_lang_constexpr mk_lang_jumbo mk_lang_types_usize_t mk_sl_ring_inl_defd_ro_get_free(mk_sl_ring_inl_defd_pct const ring) mk_lang_noexcept;
mk_lang_nodiscard mk_lang_constexpr mk_lang_jumbo mk_sl_ring_inl_defd_elem_pct mk_sl_ring_inl_defd_ro_get_elem(mk_sl_ring_inl_defd_pct const ring, mk_lang_types_usize_t const idx) mk_lang_noexcept;
mk_lang_nodiscard mk_lang_constexpr mk_lang_jumbo mk_sl_ring_inl_defd_elem_pct mk_sl_ring_inl_defd_ro_get_head(mk_sl_ring_inl_defd_pct const ring) mk_lang_noexcept;
mk_lang_nodiscard mk_lang_constexpr mk_lang_jumbo mk_sl_ring_inl_defd_elem_pct mk_sl_ring_inl_defd_ro_get_tail(mk_sl_ring_inl_defd_pct const ring) mk_lang_noexcept;

mk_lang_nodiscard mk_lang_constexpr mk_lang_jumbo mk_lang_types_bool_t mk_sl_ring_inl_defd_rw_is_empty(mk_sl_ring_inl_defd_pt const ring) mk_lang_noexcept;
mk_lang_nodiscard mk_lang_constexpr mk_lang_jumbo mk_lang_types_bool_t mk_sl_ring_inl_defd_rw_is_full(mk_sl_ring_inl_defd_pt const ring) mk_lang_noexcept;
mk_lang_nodiscard mk_lang_constexpr mk_lang_jumbo mk_lang_types_usize_t mk_sl_ring_inl_defd_rw_get_size(mk_sl_ring_inl_defd_pt const ring) mk_lang_noexcept;
mk_lang_nodiscard mk_lang_constexpr mk_lang_jumbo mk_lang_types_usize_t mk_sl_ring_inl_defd_rw_get_capacity(mk_sl_ring_inl_defd_pt const ring) mk_lang_noexcept;
mk_lang_nodiscard mk_lang_constexpr mk_lang_jumbo mk_lang_types_usize_t mk_sl_ring_inl_defd_rw_get_free(mk_sl_ring_inl_defd_pt const ring) mk_lang_noexcept;
mk_lang_nodiscard mk_lang_constexpr mk_lang_jumbo mk_sl_ring_inl_defd_elem_pt mk_sl_ring_inl_defd_rw_get_elem(mk_sl_ring_inl_defd_pt const ring, mk_lang_types_usize_t const idx) mk_lang_noexcept;
mk_lang_nodiscard mk_lang_constexpr mk_lang_jumbo mk_sl_ring_inl_defd_elem_pt mk_sl_ring_inl_defd_rw_get_head(mk_sl_ring_inl_defd_pt const ring) mk_lang_noexcept;
mk_lang_nodiscard mk_lang_constexpr mk_lang_jumbo mk_sl_ring_inl_defd_elem_pt mk_sl_ring_inl_defd_rw_get_tail(mk_sl_ring_inl_defd_pt const ring) mk_lang_noexcept;

mk_lang_constexpr mk_lang_jumbo mk_lang_types_void_t mk_sl_ring_inl_defd_rw_construct(mk_sl_ring_inl_defd_pt const ring) mk_lang_noexcept;
mk_lang_constexpr mk_lang_jumbo mk_lang_types_void_t mk_sl_ring_inl_defd_rw_push_void(mk_sl_ring_inl_defd_pt const ring) mk_lang_noexcept;
mk_lang_constexpr mk_lang_jumbo mk_lang_types_void_t mk_sl_ring_inl_defd_rw_push_elem(mk_sl_ring_inl_defd_pt const ring, mk_sl_ring_inl_defd_elem_pct const elem) mk_lang_noexcept;
mk_lang_constexpr mk_lang_jumbo mk_lang_types_void_t mk_sl_ring_inl_defd_rw_pop(mk_sl_ring_inl_defd_pt const ring) mk_lang_noexcept;


#include "mk_sl_ring_inl_defu.h"
