#ifndef mk_include_guard_mk_win_mt
#define mk_include_guard_mk_win_mt


#include "mk_lang_noreturn.h"


enum mk_win_kernel_logical_processor_relationship_e
{
	mk_win_kernel_logical_processor_relationship_e_processorcore,
	mk_win_kernel_logical_processor_relationship_e_numanode,
	mk_win_kernel_logical_processor_relationship_e_cache,
	mk_win_kernel_logical_processor_relationship_e_processorpackage,
	mk_win_kernel_logical_processor_relationship_e_group,
	mk_win_kernel_logical_processor_relationship_e_processordie,
	mk_win_kernel_logical_processor_relationship_e_numanodeex,
	mk_win_kernel_logical_processor_relationship_e_processormodule,
	mk_win_kernel_logical_processor_relationship_e_all = ((mk_win_base_ushort_t)(0xfffful))
};
typedef enum mk_win_kernel_logical_processor_relationship_e mk_win_kernel_logical_processor_relationship_t;

enum mk_win_kernel_processor_cache_type_e
{
	mk_win_kernel_processor_cache_type_e_unified,
	mk_win_kernel_processor_cache_type_e_instruction,
	mk_win_kernel_processor_cache_type_e_data,
	mk_win_kernel_processor_cache_type_e_trace,
	mk_win_kernel_processor_cache_type_e_dummy
};
typedef enum mk_win_kernel_processor_cache_type_e mk_win_kernel_processor_cache_type_t;

typedef mk_win_base_uintptr_t mk_win_kernel_kaffinity_t;

struct mk_win_kernel_group_affinity_s
{
	mk_win_kernel_kaffinity_t m_mask;
	mk_win_base_word_t m_group;
	mk_win_base_word_t m_reserved[3];
};
typedef struct mk_win_kernel_group_affinity_s mk_win_kernel_group_affinity_t;

struct mk_win_kernel_processor_relationship_s
{
	mk_win_base_uchar_t m_flags;
	mk_win_base_uchar_t m_efficiency_class;
	mk_win_base_uchar_t m_reserved[20];
	mk_win_base_word_t m_group_count;
	mk_win_kernel_group_affinity_t m_group_masks[mk_win_base_anysize_array];
};
typedef struct mk_win_kernel_processor_relationship_s mk_win_kernel_processor_relationship_t;

struct mk_win_kernel_numa_node_relationship_s
{
	mk_win_base_dword_t m_node_number;
	mk_win_base_uchar_t m_reserved[18];
	mk_win_base_word_t m_group_count;
	mk_win_kernel_group_affinity_t m_group_masks[mk_win_base_anysize_array];
};
typedef struct mk_win_kernel_numa_node_relationship_s mk_win_kernel_numa_node_relationship_t;

struct mk_win_kernel_cache_relationship_s
{
	mk_win_base_uchar_t m_level;
	mk_win_base_uchar_t m_associativity;
	mk_win_base_word_t m_line_size;
	mk_win_base_dword_t m_cache_size;
	mk_win_kernel_processor_cache_type_t m_type;
	mk_win_base_uchar_t m_reserved[18];
	mk_win_base_word_t m_group_count;
	mk_win_kernel_group_affinity_t m_group_masks[mk_win_base_anysize_array];
};
typedef struct mk_win_kernel_cache_relationship_s mk_win_kernel_cache_relationship_t;

struct mk_win_kernel_processor_group_info_s
{
	mk_win_base_uchar_t m_maximum_processor_count;
	mk_win_base_uchar_t m_active_processor_count;
	mk_win_base_uchar_t m_reserved[38];
	mk_win_kernel_kaffinity_t m_active_processor_mask;
};
typedef struct mk_win_kernel_processor_group_info_s mk_win_kernel_processor_group_info_t;

struct mk_win_kernel_group_relationship_s
{
	mk_win_base_word_t m_maximum_group_count;
	mk_win_base_word_t m_active_group_count;
	mk_win_base_uchar_t m_reserved[20];
	mk_win_kernel_processor_group_info_t m_group_infos[mk_win_base_anysize_array];
};
typedef struct mk_win_kernel_group_relationship_s mk_win_kernel_group_relationship_t;

union mk_win_kernel_system_logical_processor_information_ex_data_data_u
{
	mk_win_kernel_processor_relationship_t m_processor;
	mk_win_kernel_numa_node_relationship_t m_numa_node;
	mk_win_kernel_cache_relationship_t m_cache;
	mk_win_kernel_group_relationship_t m_group;
};
typedef union mk_win_kernel_system_logical_processor_information_ex_data_data_u mk_win_kernel_system_logical_processor_information_ex_data_data_t;

struct mk_win_kernel_system_logical_processor_information_ex_data_s
{
	mk_win_kernel_system_logical_processor_information_ex_data_data_t m_data;
};
typedef struct mk_win_kernel_system_logical_processor_information_ex_data_s mk_win_kernel_system_logical_processor_information_ex_data_t;
typedef mk_win_kernel_system_logical_processor_information_ex_data_t* mk_win_kernel_system_logical_processor_information_ex_data_pt;
typedef mk_win_kernel_system_logical_processor_information_ex_data_t const* mk_win_kernel_system_logical_processor_information_ex_data_pct;

struct mk_win_kernel_system_logical_processor_information_ex_s
{
	mk_win_kernel_logical_processor_relationship_t m_relationship;
	mk_win_base_dword_t m_len;
	mk_win_kernel_system_logical_processor_information_ex_data_t m_data;
};
typedef struct mk_win_kernel_system_logical_processor_information_ex_s mk_win_kernel_system_logical_processor_information_ex_t;
typedef mk_win_kernel_system_logical_processor_information_ex_t* mk_win_kernel_system_logical_processor_information_ex_pt;
typedef mk_win_kernel_system_logical_processor_information_ex_t const* mk_win_kernel_system_logical_processor_information_ex_pct;

struct mk_win_kernel_processor_number_s
{
	mk_win_base_word_t m_group;
	mk_win_base_uchar_t m_number;
	mk_win_base_uchar_t m_reserved;
};
typedef struct mk_win_kernel_processor_number_s mk_win_kernel_processor_number_t;
typedef mk_win_kernel_processor_number_t* mk_win_kernel_processor_number_pt;
typedef mk_win_kernel_processor_number_t const* mk_win_kernel_processor_number_pct;

struct mk_win_kernel_by_handle_file_information_s
{
	mk_win_base_dword_t m_file_attributes;
	mk_win_kernel_time_file_time_t m_creation_time;
	mk_win_kernel_time_file_time_t m_last_access_time;
	mk_win_kernel_time_file_time_t m_last_write_time;
	mk_win_base_dword_t m_volume_serial_number;
	mk_win_base_dword_t m_file_size_high;
	mk_win_base_dword_t m_file_size_low;
	mk_win_base_dword_t m_number_of_links;
	mk_win_base_dword_t m_file_index_high;
	mk_win_base_dword_t m_file_index_low;
};
typedef struct mk_win_kernel_by_handle_file_information_s mk_win_kernel_by_handle_file_information_t;
typedef mk_win_kernel_by_handle_file_information_t const mk_win_kernel_by_handle_file_information_ct;
typedef mk_win_kernel_by_handle_file_information_t* mk_win_kernel_by_handle_file_information_pt;
typedef mk_win_kernel_by_handle_file_information_t const* mk_win_kernel_by_handle_file_information_pct;
typedef mk_win_kernel_by_handle_file_information_t mk_win_base_far* mk_win_kernel_by_handle_file_information_lpt;
typedef mk_win_kernel_by_handle_file_information_t mk_win_base_far const* mk_win_kernel_by_handle_file_information_lpct;
typedef mk_win_kernel_by_handle_file_information_t mk_win_base_near* mk_win_kernel_by_handle_file_information_npt;
typedef mk_win_kernel_by_handle_file_information_t mk_win_base_near const* mk_win_kernel_by_handle_file_information_npct;
typedef mk_win_kernel_by_handle_file_information_t* mk_lang_restrict mk_win_kernel_by_handle_file_information_prt;
typedef mk_win_kernel_by_handle_file_information_t const* mk_lang_restrict mk_win_kernel_by_handle_file_information_prct;
typedef mk_win_kernel_by_handle_file_information_t mk_win_base_far* mk_lang_restrict mk_win_kernel_by_handle_file_information_lprt;
typedef mk_win_kernel_by_handle_file_information_t mk_win_base_far const* mk_lang_restrict mk_win_kernel_by_handle_file_information_lprct;
typedef mk_win_kernel_by_handle_file_information_t mk_win_base_near* mk_lang_restrict mk_win_kernel_by_handle_file_information_nprt;
typedef mk_win_kernel_by_handle_file_information_t mk_win_base_near const* mk_lang_restrict mk_win_kernel_by_handle_file_information_nprct;


mk_lang_nodiscard mk_lang_extern_c mk_win_base_dll_import mk_win_base_bool_t mk_win_base_stdcall GetLogicalProcessorInformationEx(mk_win_base_dword_t const relationship_type, mk_win_kernel_system_logical_processor_information_ex_pt const buffer, mk_win_base_dword_pt const len) mk_lang_noexcept;
mk_lang_nodiscard mk_lang_extern_c mk_win_base_dll_import mk_win_base_bool_t mk_win_base_stdcall SetThreadIdealProcessorEx(mk_win_base_handle_t const thread, mk_win_kernel_processor_number_pct const ideal_processor, mk_win_kernel_processor_number_pct const previous_ideal_processor) mk_lang_noexcept;
mk_lang_nodiscard mk_lang_extern_c mk_win_base_dll_import mk_win_base_wchar_lpt mk_win_base_stdcall GetCommandLineW(mk_lang_types_void_t) mk_lang_noexcept;
mk_lang_nodiscard mk_lang_extern_c mk_win_base_dll_import mk_win_base_bool_t mk_win_base_stdcall GetVolumePathNameW(mk_win_base_wchar_lpct const file_name, mk_win_base_wchar_lpt const volume_path, mk_win_base_dword_t const len) mk_lang_noexcept; /* todo since when, seems xp is gud */
mk_lang_nodiscard mk_lang_extern_c mk_win_base_dll_import mk_win_base_bool_t mk_win_base_stdcall GetVolumeNameForVolumeMountPointW(mk_win_base_wchar_lpct const volume_mount_point, mk_win_base_wchar_lpt const volume_name, mk_win_base_dword_t const len) mk_lang_noexcept; /* todo since when, seems xp is gud */
mk_lang_extern_c mk_win_base_dll_import mk_lang_noreturn mk_win_base_void_t mk_win_base_stdcall ExitProcess(mk_win_base_uint_t const exit_code) mk_lang_noexcept;
mk_lang_nodiscard mk_lang_extern_c mk_win_base_dll_import mk_win_base_bool_t mk_win_base_stdcall GetFileInformationByHandle(mk_win_base_handle_t const file, mk_win_kernel_by_handle_file_information_lpt const information) mk_lang_noexcept;
mk_lang_nodiscard mk_lang_extern_c mk_win_base_dll_import mk_win_base_dword_t mk_win_base_stdcall GetFinalPathNameByHandleW(mk_win_base_handle_t const file, mk_win_base_wchar_lpt const path, mk_win_base_dword_t const len, mk_win_base_dword_t const flags) mk_lang_noexcept; /* since vista and 2k8 */


#endif
