define(`mk_lib_crypto_alg_aes_inl_defd_key_len_m', `mk_lang_concat(`mk_lib_crypto_alg_aes_', mk_lib_crypto_alg_aes_t_name, `_key_len_m')')dnl
define(`mk_lib_crypto_alg_aes_inl_defd_msg_len_m', `mk_lang_concat(`mk_lib_crypto_alg_aes_', mk_lib_crypto_alg_aes_t_name, `_msg_len_m')')dnl
define(`mk_lib_crypto_alg_aes_inl_defd_schedule_len_m', `mk_lang_concat(`mk_lib_crypto_alg_aes_', mk_lib_crypto_alg_aes_t_name, `_schedule_len_m')')dnl
#include "mk_lang_alignas.h"
#include "mk_lang_charbit.h"
#include "mk_lang_constexpr.h"
#include "mk_lang_jumbo.h"
#include "mk_lang_noexcept.h"
#include "mk_lang_pow2.h"
#include "mk_lang_types.h"
#include "mk_lib_crypto_alg_aes_base.h"
#include "mk_sl_uint8.h"


#include "mk_lib_crypto_alg_aes_inl_defd.h"


`#define' mk_lib_crypto_alg_aes_inl_defd_key_len_m (mk_lib_crypto_alg_aes_t_key_bits / mk_lang_charbit)
`#define' mk_lib_crypto_alg_aes_inl_defd_msg_len_m (128 / mk_lang_charbit)
`#define' mk_lib_crypto_alg_aes_inl_defd_schedule_len_m ((mk_lib_crypto_alg_aes_t_nr + 1) * mk_lib_crypto_alg_aes_inl_defd_msg_len_m)
enum mk_lib_crypto_alg_aes_inl_defd_key_len_e { mk_lib_crypto_alg_aes_inl_defd_key_len_v = mk_lib_crypto_alg_aes_inl_defd_key_len_m };
enum mk_lib_crypto_alg_aes_inl_defd_msg_len_e { mk_lib_crypto_alg_aes_inl_defd_msg_len_v = mk_lib_crypto_alg_aes_inl_defd_msg_len_m };
enum mk_lib_crypto_alg_aes_inl_defd_schedule_len_e { mk_lib_crypto_alg_aes_inl_defd_schedule_len_v = mk_lib_crypto_alg_aes_inl_defd_schedule_len_m };


union mk_lib_crypto_alg_aes_inl_defd_aligned_key_u
{
	mk_lang_alignas(mk_lang_pow2_roundup(mk_lib_crypto_alg_aes_inl_defd_key_len_v)) mk_sl_cui_uint8_t m_uint8s[mk_lib_crypto_alg_aes_inl_defd_key_len_v];
	mk_lang_types_ulllong_t m_ulllong;
};
typedef union mk_lib_crypto_alg_aes_inl_defd_aligned_key_u mk_lib_crypto_alg_aes_inl_defd_aligned_key_t;

struct mk_lib_crypto_alg_aes_inl_defd_key_s
{
	mk_lib_crypto_alg_aes_inl_defd_aligned_key_t m_data;
};
typedef struct mk_lib_crypto_alg_aes_inl_defd_key_s mk_lib_crypto_alg_aes_inl_defd_key_t;
typedef mk_lib_crypto_alg_aes_inl_defd_key_t const mk_lib_crypto_alg_aes_inl_defd_key_ct;
typedef mk_lib_crypto_alg_aes_inl_defd_key_t* mk_lib_crypto_alg_aes_inl_defd_key_pt;
typedef mk_lib_crypto_alg_aes_inl_defd_key_t const* mk_lib_crypto_alg_aes_inl_defd_key_pct;

typedef mk_lib_crypto_alg_aes_base_msg_t mk_lib_crypto_alg_aes_inl_defd_msg_t;
typedef mk_lib_crypto_alg_aes_inl_defd_msg_t const mk_lib_crypto_alg_aes_inl_defd_msg_ct;
typedef mk_lib_crypto_alg_aes_inl_defd_msg_t* mk_lib_crypto_alg_aes_inl_defd_msg_pt;
typedef mk_lib_crypto_alg_aes_inl_defd_msg_t const* mk_lib_crypto_alg_aes_inl_defd_msg_pct;

union mk_lib_crypto_alg_aes_inl_defd_aligned_schedule_u
{
	mk_lib_crypto_alg_aes_base_msg_t m_msgs[mk_lib_crypto_alg_aes_inl_defd_nr + 1];
	mk_lang_types_ulllong_t m_ulllong;
};
typedef union mk_lib_crypto_alg_aes_inl_defd_aligned_schedule_u mk_lib_crypto_alg_aes_inl_defd_aligned_schedule_t;

struct mk_lib_crypto_alg_aes_inl_defd_schedule_s
{
	mk_lib_crypto_alg_aes_inl_defd_aligned_schedule_t m_data;
};
typedef struct mk_lib_crypto_alg_aes_inl_defd_schedule_s mk_lib_crypto_alg_aes_inl_defd_schedule_t;
typedef mk_lib_crypto_alg_aes_inl_defd_schedule_t const mk_lib_crypto_alg_aes_inl_defd_schedule_ct;
typedef mk_lib_crypto_alg_aes_inl_defd_schedule_t* mk_lib_crypto_alg_aes_inl_defd_schedule_pt;
typedef mk_lib_crypto_alg_aes_inl_defd_schedule_t const* mk_lib_crypto_alg_aes_inl_defd_schedule_pct;

mk_lang_constexpr mk_lang_jumbo void mk_lib_crypto_alg_aes_inl_defd_portable_schedule_encrypt(mk_lib_crypto_alg_aes_inl_defd_schedule_pct const schedule, mk_lib_crypto_alg_aes_base_msg_pct const input, mk_lib_crypto_alg_aes_base_msg_pt const output) mk_lang_noexcept;
mk_lang_constexpr mk_lang_jumbo void mk_lib_crypto_alg_aes_inl_defd_portable_schedule_decrypt(mk_lib_crypto_alg_aes_inl_defd_schedule_pct const schedule, mk_lib_crypto_alg_aes_base_msg_pct const input, mk_lib_crypto_alg_aes_base_msg_pt const output) mk_lang_noexcept;
mk_lang_constexpr mk_lang_jumbo void mk_lib_crypto_alg_aes_inl_defd_portable_expand_enc(mk_lib_crypto_alg_aes_inl_defd_key_pct const key, mk_lib_crypto_alg_aes_inl_defd_schedule_pt const schedule) mk_lang_noexcept;
mk_lang_constexpr mk_lang_jumbo void mk_lib_crypto_alg_aes_inl_defd_portable_expand_dec(mk_lib_crypto_alg_aes_inl_defd_key_pct const key, mk_lib_crypto_alg_aes_inl_defd_schedule_pt const schedule) mk_lang_noexcept;
mk_lang_constexpr mk_lang_jumbo void mk_lib_crypto_alg_aes_inl_defd_portable_encrypt(mk_lib_crypto_alg_aes_inl_defd_key_pct const key, mk_lib_crypto_alg_aes_base_msg_pct const input, mk_lib_crypto_alg_aes_base_msg_pt const output) mk_lang_noexcept;
mk_lang_constexpr mk_lang_jumbo void mk_lib_crypto_alg_aes_inl_defd_portable_decrypt(mk_lib_crypto_alg_aes_inl_defd_key_pct const key, mk_lib_crypto_alg_aes_base_msg_pct const input, mk_lib_crypto_alg_aes_base_msg_pt const output) mk_lang_noexcept;

mk_lang_jumbo void mk_lib_crypto_alg_aes_inl_defd_accelerated_schedule_encrypt(mk_lib_crypto_alg_aes_inl_defd_schedule_pct const schedule, mk_lib_crypto_alg_aes_base_msg_pct const input, mk_lib_crypto_alg_aes_base_msg_pt const output) mk_lang_noexcept;
mk_lang_jumbo void mk_lib_crypto_alg_aes_inl_defd_accelerated_schedule_decrypt(mk_lib_crypto_alg_aes_inl_defd_schedule_pct const schedule, mk_lib_crypto_alg_aes_base_msg_pct const input, mk_lib_crypto_alg_aes_base_msg_pt const output) mk_lang_noexcept;
mk_lang_jumbo void mk_lib_crypto_alg_aes_inl_defd_accelerated_expand_enc(mk_lib_crypto_alg_aes_inl_defd_key_pct const key, mk_lib_crypto_alg_aes_inl_defd_schedule_pt const schedule) mk_lang_noexcept;
mk_lang_jumbo void mk_lib_crypto_alg_aes_inl_defd_accelerated_expand_dec(mk_lib_crypto_alg_aes_inl_defd_key_pct const key, mk_lib_crypto_alg_aes_inl_defd_schedule_pt const schedule) mk_lang_noexcept;
mk_lang_jumbo void mk_lib_crypto_alg_aes_inl_defd_accelerated_encrypt(mk_lib_crypto_alg_aes_inl_defd_key_pct const key, mk_lib_crypto_alg_aes_base_msg_pct const input, mk_lib_crypto_alg_aes_base_msg_pt const output) mk_lang_noexcept;
mk_lang_jumbo void mk_lib_crypto_alg_aes_inl_defd_accelerated_decrypt(mk_lib_crypto_alg_aes_inl_defd_key_pct const key, mk_lib_crypto_alg_aes_base_msg_pct const input, mk_lib_crypto_alg_aes_base_msg_pt const output) mk_lang_noexcept;

mk_lang_constexpr mk_lang_jumbo void mk_lib_crypto_alg_aes_inl_defd_schedule_encrypt(mk_lib_crypto_alg_aes_inl_defd_schedule_pct const schedule, mk_lib_crypto_alg_aes_base_msg_pct const input, mk_lib_crypto_alg_aes_base_msg_pt const output) mk_lang_noexcept;
mk_lang_constexpr mk_lang_jumbo void mk_lib_crypto_alg_aes_inl_defd_schedule_decrypt(mk_lib_crypto_alg_aes_inl_defd_schedule_pct const schedule, mk_lib_crypto_alg_aes_base_msg_pct const input, mk_lib_crypto_alg_aes_base_msg_pt const output) mk_lang_noexcept;
mk_lang_constexpr mk_lang_jumbo void mk_lib_crypto_alg_aes_inl_defd_expand_enc(mk_lib_crypto_alg_aes_inl_defd_key_pct const key, mk_lib_crypto_alg_aes_inl_defd_schedule_pt const schedule) mk_lang_noexcept;
mk_lang_constexpr mk_lang_jumbo void mk_lib_crypto_alg_aes_inl_defd_expand_dec(mk_lib_crypto_alg_aes_inl_defd_key_pct const key, mk_lib_crypto_alg_aes_inl_defd_schedule_pt const schedule) mk_lang_noexcept;
mk_lang_constexpr mk_lang_jumbo void mk_lib_crypto_alg_aes_inl_defd_encrypt(mk_lib_crypto_alg_aes_inl_defd_key_pct const key, mk_lib_crypto_alg_aes_base_msg_pct const input, mk_lib_crypto_alg_aes_base_msg_pt const output) mk_lang_noexcept;
mk_lang_constexpr mk_lang_jumbo void mk_lib_crypto_alg_aes_inl_defd_decrypt(mk_lib_crypto_alg_aes_inl_defd_key_pct const key, mk_lib_crypto_alg_aes_base_msg_pct const input, mk_lib_crypto_alg_aes_base_msg_pt const output) mk_lang_noexcept;


#include "mk_lib_crypto_alg_aes_inl_defu.h"
