#include "mk_lang_jumbo.h"
#include "mk_lang_nodiscard.h"
#include "mk_lang_noexcept.h"
#include "mk_lang_types.h"
#include "mk_lang_version.h"
#include "mk_lib_mt_memory_order.h"

#include <atomic> /* std::atomic */
#include <type_traits> /* std::aligned_storage */


#include "mk_lib_mt_atomic_portable_cpp_inl_defd.hpp"


typedef mk_lib_mt_atomic_portable_cpp_inl_defd_type mk_lib_mt_atomic_portable_cpp_inl_defd_type_t;
typedef mk_lib_mt_atomic_portable_cpp_inl_defd_type_t const mk_lib_mt_atomic_portable_cpp_inl_defd_type_ct;
typedef mk_lib_mt_atomic_portable_cpp_inl_defd_type_t* mk_lib_mt_atomic_portable_cpp_inl_defd_type_pt;
typedef mk_lib_mt_atomic_portable_cpp_inl_defd_type_t const* mk_lib_mt_atomic_portable_cpp_inl_defd_type_pct;


struct mk_lib_mt_atomic_portable_cpp_inl_defd_s
{
	#if mk_lang_version_at_least_cpp_23
	alignas(alignof(std::atomic<mk_lib_mt_atomic_portable_cpp_inl_defd_type_t>)) mk_lang_types_uchar_t m_atomyc[sizeof(std::atomic<mk_lib_mt_atomic_portable_cpp_inl_defd_type_t>)];
	#else
	typename std::aligned_storage<sizeof(std::atomic<mk_lib_mt_atomic_portable_cpp_inl_defd_type_t>), alignof(std::atomic<mk_lib_mt_atomic_portable_cpp_inl_defd_type_t>)>::type m_atomyc;
	#endif
};
typedef struct mk_lib_mt_atomic_portable_cpp_inl_defd_s mk_lib_mt_atomic_portable_cpp_inl_defd_t;
typedef mk_lib_mt_atomic_portable_cpp_inl_defd_t const mk_lib_mt_atomic_portable_cpp_inl_defd_ct;
typedef mk_lib_mt_atomic_portable_cpp_inl_defd_t* mk_lib_mt_atomic_portable_cpp_inl_defd_pt;
typedef mk_lib_mt_atomic_portable_cpp_inl_defd_t const* mk_lib_mt_atomic_portable_cpp_inl_defd_pct;


mk_lang_nodiscard mk_lang_jumbo mk_lang_types_sint_t mk_lib_mt_atomic_portable_cpp_inl_defd_construct(mk_lib_mt_atomic_portable_cpp_inl_defd_pt const atomyc) mk_lang_noexcept;
mk_lang_nodiscard mk_lang_jumbo mk_lang_types_sint_t mk_lib_mt_atomic_portable_cpp_inl_defd_destroy(mk_lib_mt_atomic_portable_cpp_inl_defd_pt const atomyc) mk_lang_noexcept;
mk_lang_nodiscard mk_lang_jumbo mk_lang_types_sint_t mk_lib_mt_atomic_portable_cpp_inl_defd_store(mk_lib_mt_atomic_portable_cpp_inl_defd_pt const atomyc, mk_lib_mt_atomic_portable_cpp_inl_defd_type_pct const desired, mk_lib_mt_memory_order_t const mo) mk_lang_noexcept;
mk_lang_nodiscard mk_lang_jumbo mk_lang_types_sint_t mk_lib_mt_atomic_portable_cpp_inl_defd_load(mk_lib_mt_atomic_portable_cpp_inl_defd_pct const atomyc, mk_lib_mt_atomic_portable_cpp_inl_defd_type_pt const dst, mk_lib_mt_memory_order_t const mo) mk_lang_noexcept;
mk_lang_nodiscard mk_lang_jumbo mk_lang_types_sint_t mk_lib_mt_atomic_portable_cpp_inl_defd_fetch_add(mk_lib_mt_atomic_portable_cpp_inl_defd_pt const atomyc, mk_lib_mt_atomic_portable_cpp_inl_defd_type_pct const arg, mk_lib_mt_memory_order_t const mo, mk_lib_mt_atomic_portable_cpp_inl_defd_type_pt const dst) mk_lang_noexcept;
mk_lang_nodiscard mk_lang_jumbo mk_lang_types_sint_t mk_lib_mt_atomic_portable_cpp_inl_defd_fetch_sub(mk_lib_mt_atomic_portable_cpp_inl_defd_pt const atomyc, mk_lib_mt_atomic_portable_cpp_inl_defd_type_pct const arg, mk_lib_mt_memory_order_t const mo, mk_lib_mt_atomic_portable_cpp_inl_defd_type_pt const dst) mk_lang_noexcept;
mk_lang_nodiscard mk_lang_jumbo mk_lang_types_sint_t mk_lib_mt_atomic_portable_cpp_inl_defd_fetch_and(mk_lib_mt_atomic_portable_cpp_inl_defd_pt const atomyc, mk_lib_mt_atomic_portable_cpp_inl_defd_type_pct const arg, mk_lib_mt_memory_order_t const mo, mk_lib_mt_atomic_portable_cpp_inl_defd_type_pt const dst) mk_lang_noexcept;
mk_lang_nodiscard mk_lang_jumbo mk_lang_types_sint_t mk_lib_mt_atomic_portable_cpp_inl_defd_fetch_xor(mk_lib_mt_atomic_portable_cpp_inl_defd_pt const atomyc, mk_lib_mt_atomic_portable_cpp_inl_defd_type_pct const arg, mk_lib_mt_memory_order_t const mo, mk_lib_mt_atomic_portable_cpp_inl_defd_type_pt const dst) mk_lang_noexcept;
mk_lang_nodiscard mk_lang_jumbo mk_lang_types_sint_t mk_lib_mt_atomic_portable_cpp_inl_defd_fetch_or(mk_lib_mt_atomic_portable_cpp_inl_defd_pt const atomyc, mk_lib_mt_atomic_portable_cpp_inl_defd_type_pct const arg, mk_lib_mt_memory_order_t const mo, mk_lib_mt_atomic_portable_cpp_inl_defd_type_pt const dst) mk_lang_noexcept;
mk_lang_nodiscard mk_lang_jumbo mk_lang_types_sint_t mk_lib_mt_atomic_portable_cpp_inl_defd_inc(mk_lib_mt_atomic_portable_cpp_inl_defd_pt const atomyc, mk_lib_mt_memory_order_t const mo, mk_lib_mt_atomic_portable_cpp_inl_defd_type_pt const dst) mk_lang_noexcept;
mk_lang_nodiscard mk_lang_jumbo mk_lang_types_sint_t mk_lib_mt_atomic_portable_cpp_inl_defd_dec(mk_lib_mt_atomic_portable_cpp_inl_defd_pt const atomyc, mk_lib_mt_memory_order_t const mo, mk_lib_mt_atomic_portable_cpp_inl_defd_type_pt const dst) mk_lang_noexcept;
mk_lang_nodiscard mk_lang_jumbo mk_lang_types_sint_t mk_lib_mt_atomic_portable_cpp_inl_defd_exchange(mk_lib_mt_atomic_portable_cpp_inl_defd_pt const atomyc) mk_lang_noexcept;
mk_lang_nodiscard mk_lang_jumbo mk_lang_types_sint_t mk_lib_mt_atomic_portable_cpp_inl_defd_compare_exchange_weak(mk_lib_mt_atomic_portable_cpp_inl_defd_pt const atomyc) mk_lang_noexcept;
mk_lang_nodiscard mk_lang_jumbo mk_lang_types_sint_t mk_lib_mt_atomic_portable_cpp_inl_defd_compare_exchange_strong(mk_lib_mt_atomic_portable_cpp_inl_defd_pt const atomyc) mk_lang_noexcept;


#include "mk_lib_mt_atomic_portable_cpp_inl_defu.hpp"
