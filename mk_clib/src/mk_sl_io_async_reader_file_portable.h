#ifndef mk_include_guard_mk_sl_io_async_reader_file_portable
#define mk_include_guard_mk_sl_io_async_reader_file_portable


#include "mk_lang_jumbo.h"
#include "mk_lang_nodiscard.h"
#include "mk_lang_noexcept.h"
#include "mk_lang_types.h"
#include "mk_sl_uint64.h"
#include "mk_sl_uint8.h"

#include <stdio.h> /* FILE */


struct mk_sl_io_transaction_portable_s;
typedef struct mk_sl_io_transaction_portable_s mk_sl_io_transaction_portable_t;
typedef mk_sl_io_transaction_portable_t const mk_sl_io_transaction_portable_ct;
typedef mk_sl_io_transaction_portable_t* mk_sl_io_transaction_portable_pt;
typedef mk_sl_io_transaction_portable_t const* mk_sl_io_transaction_portable_pct;

struct mk_sl_io_async_iocp_portable_s;
typedef struct mk_sl_io_async_iocp_portable_s mk_sl_io_async_iocp_portable_t;
typedef mk_sl_io_async_iocp_portable_t const mk_sl_io_async_iocp_portable_ct;
typedef mk_sl_io_async_iocp_portable_t* mk_sl_io_async_iocp_portable_pt;
typedef mk_sl_io_async_iocp_portable_t const* mk_sl_io_async_iocp_portable_pct;

struct mk_sl_io_async_thread_portable_s;
typedef struct mk_sl_io_async_thread_portable_s mk_sl_io_async_thread_portable_t;
typedef mk_sl_io_async_thread_portable_t const mk_sl_io_async_thread_portable_ct;
typedef mk_sl_io_async_thread_portable_t* mk_sl_io_async_thread_portable_pt;
typedef mk_sl_io_async_thread_portable_t const* mk_sl_io_async_thread_portable_pct;


struct mk_sl_io_async_reader_file_portable_s
{
	FILE* m_file;
	mk_lang_types_usize_t m_key;
	mk_sl_io_async_iocp_portable_pt m_iocp;
	mk_sl_io_async_thread_portable_pt m_thread;
};
typedef struct mk_sl_io_async_reader_file_portable_s mk_sl_io_async_reader_file_portable_t;
typedef mk_sl_io_async_reader_file_portable_t const mk_sl_io_async_reader_file_portable_ct;
typedef mk_sl_io_async_reader_file_portable_t* mk_sl_io_async_reader_file_portable_pt;
typedef mk_sl_io_async_reader_file_portable_t const* mk_sl_io_async_reader_file_portable_pct;

struct mk_sl_io_async_reader_file_iorp_portable_s
{
	mk_sl_cui_uint8_pt m_buf;
	mk_lang_types_usize_t m_len;
	mk_sl_cui_uint64_t m_pos;
	mk_lang_types_usize_t m_transfered;
};
typedef struct mk_sl_io_async_reader_file_iorp_portable_s mk_sl_io_async_reader_file_iorp_portable_t;
typedef mk_sl_io_async_reader_file_iorp_portable_t const mk_sl_io_async_reader_file_iorp_portable_ct;
typedef mk_sl_io_async_reader_file_iorp_portable_t* mk_sl_io_async_reader_file_iorp_portable_pt;
typedef mk_sl_io_async_reader_file_iorp_portable_t const* mk_sl_io_async_reader_file_iorp_portable_pct;


mk_lang_nodiscard mk_lang_jumbo mk_lang_types_sint_t mk_sl_io_async_reader_file_portable_open_n(mk_sl_io_async_reader_file_portable_pt const reader, mk_lang_types_pchar_pct const name, mk_sl_io_async_thread_portable_pt const thread) mk_lang_noexcept;
mk_lang_nodiscard mk_lang_jumbo mk_lang_types_sint_t mk_sl_io_async_reader_file_portable_open_w(mk_sl_io_async_reader_file_portable_pt const reader, mk_lang_types_wchar_pct const name, mk_sl_io_async_thread_portable_pt const thread) mk_lang_noexcept;
mk_lang_nodiscard mk_lang_jumbo mk_lang_types_sint_t mk_sl_io_async_reader_file_portable_open_tx_n(mk_sl_io_async_reader_file_portable_pt const reader, mk_lang_types_pchar_pct const name, mk_sl_io_transaction_portable_pt const tx, mk_sl_io_async_thread_portable_pt const thread) mk_lang_noexcept;
mk_lang_nodiscard mk_lang_jumbo mk_lang_types_sint_t mk_sl_io_async_reader_file_portable_open_tx_w(mk_sl_io_async_reader_file_portable_pt const reader, mk_lang_types_wchar_pct const name, mk_sl_io_transaction_portable_pt const tx, mk_sl_io_async_thread_portable_pt const thread) mk_lang_noexcept;
mk_lang_nodiscard mk_lang_jumbo mk_lang_types_sint_t mk_sl_io_async_reader_file_portable_request_read(mk_sl_io_async_reader_file_portable_pt const reader, mk_sl_io_async_reader_file_iorp_portable_pt const iorp) mk_lang_noexcept;
mk_lang_nodiscard mk_lang_jumbo mk_lang_types_sint_t mk_sl_io_async_reader_file_portable_close(mk_sl_io_async_reader_file_portable_pt const reader) mk_lang_noexcept;

mk_lang_nodiscard mk_lang_jumbo mk_lang_types_sint_t mk_sl_io_async_reader_file_iorp_portable_construct_void(mk_sl_io_async_reader_file_iorp_portable_pt const iorp) mk_lang_noexcept;
mk_lang_nodiscard mk_lang_jumbo mk_lang_types_sint_t mk_sl_io_async_reader_file_iorp_portable_construct_args(mk_sl_io_async_reader_file_iorp_portable_pt const iorp, mk_sl_cui_uint8_pt const buf, mk_lang_types_usize_t const len, mk_sl_cui_uint64_pct const pos) mk_lang_noexcept;
mk_lang_nodiscard mk_lang_jumbo mk_lang_types_sint_t mk_sl_io_async_reader_file_iorp_portable_reconstruct(mk_sl_io_async_reader_file_iorp_portable_pt const iorp, mk_sl_cui_uint8_pt const buf, mk_lang_types_usize_t const len, mk_sl_cui_uint64_pct const pos) mk_lang_noexcept;
mk_lang_nodiscard mk_lang_jumbo mk_lang_types_sint_t mk_sl_io_async_reader_file_iorp_portable_buf(mk_sl_io_async_reader_file_iorp_portable_pt const iorp, mk_sl_cui_uint8_pt* const buf) mk_lang_noexcept;
mk_lang_nodiscard mk_lang_jumbo mk_lang_types_sint_t mk_sl_io_async_reader_file_iorp_portable_len(mk_sl_io_async_reader_file_iorp_portable_pt const iorp, mk_lang_types_usize_pt const len) mk_lang_noexcept;
mk_lang_nodiscard mk_lang_jumbo mk_lang_types_sint_t mk_sl_io_async_reader_file_iorp_portable_pos(mk_sl_io_async_reader_file_iorp_portable_pt const iorp, mk_sl_cui_uint64_pt const pos) mk_lang_noexcept;
mk_lang_nodiscard mk_lang_jumbo mk_lang_types_sint_t mk_sl_io_async_reader_file_iorp_portable_destroy(mk_sl_io_async_reader_file_iorp_portable_pt const iorp) mk_lang_noexcept;


#if mk_lang_jumbo_want == 1
#include "mk_sl_io_async_reader_file_portable.c"
#endif
#endif
