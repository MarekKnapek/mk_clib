#ifndef mk_include_guard_mk_lib_crypto_alg_aes_portable_128
#define mk_include_guard_mk_lib_crypto_alg_aes_portable_128


/* NIST FIPS PUB 197 */


#include "mk_lang_alignas.h"
#include "mk_lang_charbit.h"
#include "mk_lang_constexpr.h"
#include "mk_lang_jumbo.h"
#include "mk_lang_noexcept.h"
#include "mk_lang_pow2.h"
#include "mk_lang_types.h"
#include "mk_lib_crypto_alg_aes_128.h"
#include "mk_sl_uint8.h"


#define mk_lib_crypto_alg_aes_portable_128_nr 10
#define mk_lib_crypto_alg_aes_portable_128_key_len_m (128 / mk_lang_charbit)
#define mk_lib_crypto_alg_aes_portable_128_msg_len_m (128 / mk_lang_charbit)
#define mk_lib_crypto_alg_aes_portable_128_schedule_len_m ((mk_lib_crypto_alg_aes_portable_128_nr + 1) * mk_lib_crypto_alg_aes_portable_128_msg_len_m)
enum mk_lib_crypto_alg_aes_portable_128_key_len_e { mk_lib_crypto_alg_aes_portable_128_key_len_v = mk_lib_crypto_alg_aes_portable_128_key_len_m };
enum mk_lib_crypto_alg_aes_portable_128_msg_len_e { mk_lib_crypto_alg_aes_portable_128_msg_len_v = mk_lib_crypto_alg_aes_portable_128_msg_len_m };
enum mk_lib_crypto_alg_aes_portable_128_schedule_len_e { mk_lib_crypto_alg_aes_portable_128_schedule_len_v = mk_lib_crypto_alg_aes_portable_128_schedule_len_m };


typedef mk_lib_crypto_alg_aes_128_key_t mk_lib_crypto_alg_aes_portable_128_key_t;
typedef mk_lib_crypto_alg_aes_portable_128_key_t const mk_lib_crypto_alg_aes_portable_128_key_ct;
typedef mk_lib_crypto_alg_aes_portable_128_key_t* mk_lib_crypto_alg_aes_portable_128_key_pt;
typedef mk_lib_crypto_alg_aes_portable_128_key_t const* mk_lib_crypto_alg_aes_portable_128_key_pct;

typedef mk_lib_crypto_alg_aes_128_msg_t mk_lib_crypto_alg_aes_portable_128_msg_t;
typedef mk_lib_crypto_alg_aes_portable_128_msg_t const mk_lib_crypto_alg_aes_portable_128_msg_ct;
typedef mk_lib_crypto_alg_aes_portable_128_msg_t* mk_lib_crypto_alg_aes_portable_128_msg_pt;
typedef mk_lib_crypto_alg_aes_portable_128_msg_t const* mk_lib_crypto_alg_aes_portable_128_msg_pct;

typedef mk_lib_crypto_alg_aes_128_schedule_t mk_lib_crypto_alg_aes_portable_128_schedule_t;
typedef mk_lib_crypto_alg_aes_portable_128_schedule_t const mk_lib_crypto_alg_aes_portable_128_schedule_ct;
typedef mk_lib_crypto_alg_aes_portable_128_schedule_t* mk_lib_crypto_alg_aes_portable_128_schedule_pt;
typedef mk_lib_crypto_alg_aes_portable_128_schedule_t const* mk_lib_crypto_alg_aes_portable_128_schedule_pct;


mk_lang_constexpr mk_lang_jumbo mk_lang_types_void_t mk_lib_crypto_alg_aes_portable_128_schedule_encrypt(mk_lib_crypto_alg_aes_portable_128_schedule_pct const schedule, mk_lib_crypto_alg_aes_portable_128_msg_pct const input, mk_lib_crypto_alg_aes_portable_128_msg_pt const output, mk_lang_types_usize_t const nblocks) mk_lang_noexcept;
mk_lang_constexpr mk_lang_jumbo mk_lang_types_void_t mk_lib_crypto_alg_aes_portable_128_schedule_decrypt(mk_lib_crypto_alg_aes_portable_128_schedule_pct const schedule, mk_lib_crypto_alg_aes_portable_128_msg_pct const input, mk_lib_crypto_alg_aes_portable_128_msg_pt const output, mk_lang_types_usize_t const nblocks) mk_lang_noexcept;
mk_lang_constexpr mk_lang_jumbo mk_lang_types_void_t mk_lib_crypto_alg_aes_portable_128_expand_enc(mk_lib_crypto_alg_aes_portable_128_key_pct const key, mk_lib_crypto_alg_aes_portable_128_schedule_pt const schedule) mk_lang_noexcept;
mk_lang_constexpr mk_lang_jumbo mk_lang_types_void_t mk_lib_crypto_alg_aes_portable_128_expand_dec(mk_lib_crypto_alg_aes_portable_128_key_pct const key, mk_lib_crypto_alg_aes_portable_128_schedule_pt const schedule) mk_lang_noexcept;
mk_lang_constexpr mk_lang_jumbo mk_lang_types_void_t mk_lib_crypto_alg_aes_portable_128_encrypt(mk_lib_crypto_alg_aes_portable_128_key_pct const key, mk_lib_crypto_alg_aes_portable_128_msg_pct const input, mk_lib_crypto_alg_aes_portable_128_msg_pt const output) mk_lang_noexcept;
mk_lang_constexpr mk_lang_jumbo mk_lang_types_void_t mk_lib_crypto_alg_aes_portable_128_decrypt(mk_lib_crypto_alg_aes_portable_128_key_pct const key, mk_lib_crypto_alg_aes_portable_128_msg_pct const input, mk_lib_crypto_alg_aes_portable_128_msg_pt const output) mk_lang_noexcept;


#if mk_lang_jumbo_want == 1
#include "mk_lib_crypto_alg_aes_portable_128.c"
#endif
#endif
