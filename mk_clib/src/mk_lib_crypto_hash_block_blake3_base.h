#ifndef mk_include_guard_mk_lib_crypto_hash_block_blake3_base
#define mk_include_guard_mk_lib_crypto_hash_block_blake3_base


#include "mk_lang_alignas.h"
#include "mk_lang_constexpr.h"
#include "mk_lang_jumbo.h"
#include "mk_lang_noexcept.h"
#include "mk_lang_types.h"
#include "mk_sl_uint32.h"
#include "mk_sl_uint64.h"
#include "mk_sl_uint8.h"


#define mk_lib_crypto_hash_block_blake3_base_block_len 64
#define mk_lib_crypto_hash_block_blake3_base_digest_len 32
#define mk_lib_crypto_hash_block_blake3_base_output_block_len 64


union mk_lib_crypto_hash_block_blake3_base_aligned64_u
{
	mk_lang_alignas(64) mk_sl_cui_uint8_t m_uint8s[64];
	mk_lang_types_ulllong_t m_ulllong;
};
typedef union mk_lib_crypto_hash_block_blake3_base_aligned64_u mk_lib_crypto_hash_block_blake3_base_aligned64_t;

union mk_lib_crypto_hash_block_blake3_base_aligned32_u
{
	mk_lang_alignas(32) mk_sl_cui_uint8_t m_uint8s[32];
	mk_lang_types_ulllong_t m_ulllong;
};
typedef union mk_lib_crypto_hash_block_blake3_base_aligned32_u mk_lib_crypto_hash_block_blake3_base_aligned32_t;

union mk_lib_crypto_hash_block_blake3_base_state_u
{
	mk_lang_alignas(32) mk_sl_cui_uint32_t m_uint32s[8];
	mk_lang_types_ulllong_t m_ulllong;
};
typedef union mk_lib_crypto_hash_block_blake3_base_state_u mk_lib_crypto_hash_block_blake3_base_state_t;
typedef mk_lib_crypto_hash_block_blake3_base_state_t const mk_lib_crypto_hash_block_blake3_base_state_ct;
typedef mk_lib_crypto_hash_block_blake3_base_state_t* mk_lib_crypto_hash_block_blake3_base_state_pt;
typedef mk_lib_crypto_hash_block_blake3_base_state_t const* mk_lib_crypto_hash_block_blake3_base_state_pct;

union mk_lib_crypto_hash_block_blake3_base_output_block_u
{
	mk_lang_alignas(mk_lib_crypto_hash_block_blake3_base_output_block_len) mk_sl_cui_uint8_t m_uint8s[mk_lib_crypto_hash_block_blake3_base_output_block_len];
	mk_lang_types_ulllong_t m_ulllong;
};
typedef union mk_lib_crypto_hash_block_blake3_base_output_block_u mk_lib_crypto_hash_block_blake3_base_output_block_t;
typedef mk_lib_crypto_hash_block_blake3_base_output_block_t const mk_lib_crypto_hash_block_blake3_base_output_block_ct;
typedef mk_lib_crypto_hash_block_blake3_base_output_block_t* mk_lib_crypto_hash_block_blake3_base_output_block_pt;
typedef mk_lib_crypto_hash_block_blake3_base_output_block_t const* mk_lib_crypto_hash_block_blake3_base_output_block_pct;

#define mk_lib_crypto_hash_block_blake3_base_chunk_len 1024
#define mk_lib_crypto_hash_block_blake3_base_max_msg_len /* 2^64 */
#define mk_lib_crypto_hash_block_blake3_base_max_depth 54 /* log2(max_msg_len) - log2(chunk_len) */

union mk_lib_crypto_hash_block_blake3_base_aligned_states_u
{
	mk_lib_crypto_hash_block_blake3_base_state_t m_states[mk_lib_crypto_hash_block_blake3_base_max_depth + 1];
	mk_lang_types_ulllong_t m_ulllong;
};
typedef union mk_lib_crypto_hash_block_blake3_base_aligned_states_u mk_lib_crypto_hash_block_blake3_base_aligned_states_t;
typedef mk_lib_crypto_hash_block_blake3_base_aligned_states_t const mk_lib_crypto_hash_block_blake3_base_aligned_states_ct;
typedef mk_lib_crypto_hash_block_blake3_base_aligned_states_t* mk_lib_crypto_hash_block_blake3_base_aligned_states_pt;
typedef mk_lib_crypto_hash_block_blake3_base_aligned_states_t const* mk_lib_crypto_hash_block_blake3_base_aligned_states_pct;

struct mk_lib_crypto_hash_block_blake3_base_s
{
	mk_lib_crypto_hash_block_blake3_base_state_t m_state;
	mk_sl_cui_uint64_t m_chunk_count;
	mk_lang_types_uchar_t m_block_count;
	mk_lang_types_uchar_t m_state_count;
	mk_lang_types_uchar_t m_flags;
	mk_lang_types_uchar_t m_idx;
	mk_lib_crypto_hash_block_blake3_base_aligned_states_t m_states;
};
typedef struct mk_lib_crypto_hash_block_blake3_base_s mk_lib_crypto_hash_block_blake3_base_t;
typedef mk_lib_crypto_hash_block_blake3_base_t const mk_lib_crypto_hash_block_blake3_base_ct;
typedef mk_lib_crypto_hash_block_blake3_base_t* mk_lib_crypto_hash_block_blake3_base_pt;
typedef mk_lib_crypto_hash_block_blake3_base_t const* mk_lib_crypto_hash_block_blake3_base_pct;

typedef mk_lib_crypto_hash_block_blake3_base_aligned64_t mk_lib_crypto_hash_block_blake3_base_block_t;
typedef mk_lib_crypto_hash_block_blake3_base_block_t const mk_lib_crypto_hash_block_blake3_base_block_ct;
typedef mk_lib_crypto_hash_block_blake3_base_block_t* mk_lib_crypto_hash_block_blake3_base_block_pt;
typedef mk_lib_crypto_hash_block_blake3_base_block_t const* mk_lib_crypto_hash_block_blake3_base_block_pct;

typedef mk_lib_crypto_hash_block_blake3_base_aligned32_t mk_lib_crypto_hash_block_blake3_base_digest_t;
typedef mk_lib_crypto_hash_block_blake3_base_digest_t const mk_lib_crypto_hash_block_blake3_base_digest_ct;
typedef mk_lib_crypto_hash_block_blake3_base_digest_t* mk_lib_crypto_hash_block_blake3_base_digest_pt;
typedef mk_lib_crypto_hash_block_blake3_base_digest_t const* mk_lib_crypto_hash_block_blake3_base_digest_pct;

mk_lang_constexpr mk_lang_jumbo mk_lang_types_void_t mk_lib_crypto_hash_block_blake3_base_init(mk_lib_crypto_hash_block_blake3_base_pt const blake3_base) mk_lang_noexcept;
mk_lang_constexpr mk_lang_jumbo mk_lang_types_void_t mk_lib_crypto_hash_block_blake3_base_append_blocks(mk_lib_crypto_hash_block_blake3_base_pt const blake3_base, mk_lib_crypto_hash_block_blake3_base_block_pct const pblocks, mk_lang_types_usize_t const nblocks) mk_lang_noexcept;
mk_lang_constexpr mk_lang_jumbo mk_lang_types_void_t mk_lib_crypto_hash_block_blake3_base_finish(mk_lib_crypto_hash_block_blake3_base_pt const blake3_base, mk_lib_crypto_hash_block_blake3_base_block_pt const block, mk_lang_types_sint_t const idx) mk_lang_noexcept;
mk_lang_constexpr mk_lang_jumbo mk_lang_types_void_t mk_lib_crypto_hash_block_blake3_base_squeeze(mk_lib_crypto_hash_block_blake3_base_pt const blake3_base, mk_lib_crypto_hash_block_blake3_base_block_pt const block, mk_sl_cui_uint64_pct const seek, mk_lib_crypto_hash_block_blake3_base_output_block_pt const output_block) mk_lang_noexcept;


#if mk_lang_jumbo_want == 1
#include "mk_lib_crypto_hash_block_blake3_base.c"
#endif
#endif
