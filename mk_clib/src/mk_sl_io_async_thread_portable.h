#ifndef mk_include_guard_mk_sl_io_async_thread_portable
#define mk_include_guard_mk_sl_io_async_thread_portable


#include "mk_lang_jumbo.h"
#include "mk_lang_nodiscard.h"
#include "mk_lang_noexcept.h"
#include "mk_lang_types.h"
#include "mk_lib_mt_thread.h"


struct mk_sl_io_async_reader_file_portable_s;
typedef struct mk_sl_io_async_reader_file_portable_s mk_sl_io_async_reader_file_portable_t;
typedef mk_sl_io_async_reader_file_portable_t const mk_sl_io_async_reader_file_portable_ct;
typedef mk_sl_io_async_reader_file_portable_t* mk_sl_io_async_reader_file_portable_pt;
typedef mk_sl_io_async_reader_file_portable_t const* mk_sl_io_async_reader_file_portable_pct;

struct mk_sl_io_async_reader_file_iorp_portable_s;
typedef struct mk_sl_io_async_reader_file_iorp_portable_s mk_sl_io_async_reader_file_iorp_portable_t;
typedef mk_sl_io_async_reader_file_iorp_portable_t const mk_sl_io_async_reader_file_iorp_portable_ct;
typedef mk_sl_io_async_reader_file_iorp_portable_t* mk_sl_io_async_reader_file_iorp_portable_pt;
typedef mk_sl_io_async_reader_file_iorp_portable_t const* mk_sl_io_async_reader_file_iorp_portable_pct;

struct mk_sl_io_async_writer_file_portable_s;
typedef struct mk_sl_io_async_writer_file_portable_s mk_sl_io_async_writer_file_portable_t;
typedef mk_sl_io_async_writer_file_portable_t const mk_sl_io_async_writer_file_portable_ct;
typedef mk_sl_io_async_writer_file_portable_t* mk_sl_io_async_writer_file_portable_pt;
typedef mk_sl_io_async_writer_file_portable_t const* mk_sl_io_async_writer_file_portable_pct;

struct mk_sl_io_async_writer_file_iorp_portable_s;
typedef struct mk_sl_io_async_writer_file_iorp_portable_s mk_sl_io_async_writer_file_iorp_portable_t;
typedef mk_sl_io_async_writer_file_iorp_portable_t const mk_sl_io_async_writer_file_iorp_portable_ct;
typedef mk_sl_io_async_writer_file_iorp_portable_t* mk_sl_io_async_writer_file_iorp_portable_pt;
typedef mk_sl_io_async_writer_file_iorp_portable_t const* mk_sl_io_async_writer_file_iorp_portable_pct;


union mk_sl_io_async_thread_portable_file_data_u
{
	mk_sl_io_async_reader_file_portable_pt m_read;
	mk_sl_io_async_writer_file_portable_pt m_write;
};
typedef union mk_sl_io_async_thread_portable_file_data_u mk_sl_io_async_thread_portable_file_data_t;

struct mk_sl_io_async_thread_portable_file_s
{
	mk_sl_io_async_thread_portable_file_data_t m_data;
};
typedef struct mk_sl_io_async_thread_portable_file_s mk_sl_io_async_thread_portable_file_t;
typedef mk_sl_io_async_thread_portable_file_t const mk_sl_io_async_thread_portable_file_ct;
typedef mk_sl_io_async_thread_portable_file_t* mk_sl_io_async_thread_portable_file_pt;
typedef mk_sl_io_async_thread_portable_file_t const* mk_sl_io_async_thread_portable_file_pct;

union mk_sl_io_async_thread_portable_iorp_data_u
{
	mk_sl_io_async_reader_file_iorp_portable_pt m_read;
	mk_sl_io_async_writer_file_iorp_portable_pt m_write;
};
typedef union mk_sl_io_async_thread_portable_iorp_data_u mk_sl_io_async_thread_portable_iorp_data_t;

struct mk_sl_io_async_thread_portable_iorp_s
{
	mk_sl_io_async_thread_portable_iorp_data_t m_data;
};
typedef struct mk_sl_io_async_thread_portable_iorp_s mk_sl_io_async_thread_portable_iorp_t;
typedef mk_sl_io_async_thread_portable_iorp_t const mk_sl_io_async_thread_portable_iorp_ct;
typedef mk_sl_io_async_thread_portable_iorp_t* mk_sl_io_async_thread_portable_iorp_pt;
typedef mk_sl_io_async_thread_portable_iorp_t const* mk_sl_io_async_thread_portable_iorp_pct;

struct mk_sl_io_async_thread_portable_task_s
{
	mk_lang_types_sint_t m_type;
	mk_sl_io_async_thread_portable_file_t m_file;
	mk_sl_io_async_thread_portable_iorp_t m_iorp;
};
typedef struct mk_sl_io_async_thread_portable_task_s mk_sl_io_async_thread_portable_task_t;
typedef mk_sl_io_async_thread_portable_task_t const mk_sl_io_async_thread_portable_task_ct;
typedef mk_sl_io_async_thread_portable_task_t* mk_sl_io_async_thread_portable_task_pt;
typedef mk_sl_io_async_thread_portable_task_t const* mk_sl_io_async_thread_portable_task_pct;

#if mk_lib_mt_thread_has

#define mk_lib_mt_ring_t_name mk_sl_io_async_thread_portable_ring
#define mk_lib_mt_ring_t_element mk_sl_io_async_thread_portable_task_t
#define mk_lib_mt_ring_t_count 32
#include "mk_lib_mt_ring_inl_fileh.h"
#undef mk_lib_mt_ring_t_name
#undef mk_lib_mt_ring_t_element
#undef mk_lib_mt_ring_t_count

#else

#define mk_sl_ring_t_name mk_sl_io_async_thread_portable_ring
#define mk_sl_ring_t_element mk_sl_io_async_thread_portable_task_t
#define mk_sl_ring_t_count 32
#include "mk_sl_ring_inl_fileh.h"
#undef mk_sl_ring_t_name
#undef mk_sl_ring_t_element
#undef mk_sl_ring_t_count

#endif


struct mk_sl_io_async_thread_portable_s
{
	mk_sl_io_async_thread_portable_ring_t m_ring;
	#if mk_lib_mt_thread_has
	mk_lib_mt_thread_t m_thread;
	#endif
};
typedef struct mk_sl_io_async_thread_portable_s mk_sl_io_async_thread_portable_t;
typedef mk_sl_io_async_thread_portable_t const mk_sl_io_async_thread_portable_ct;
typedef mk_sl_io_async_thread_portable_t* mk_sl_io_async_thread_portable_pt;
typedef mk_sl_io_async_thread_portable_t const* mk_sl_io_async_thread_portable_pct;


mk_lang_nodiscard mk_lang_jumbo mk_lang_types_sint_t mk_sl_io_async_thread_portable_create(mk_sl_io_async_thread_portable_pt const thread) mk_lang_noexcept;
mk_lang_nodiscard mk_lang_jumbo mk_lang_types_sint_t mk_sl_io_async_thread_portable_add_r(mk_sl_io_async_thread_portable_pt const thread, mk_sl_io_async_reader_file_portable_pt const reader, mk_sl_io_async_reader_file_iorp_portable_pt const iorp) mk_lang_noexcept;
mk_lang_nodiscard mk_lang_jumbo mk_lang_types_sint_t mk_sl_io_async_thread_portable_add_w(mk_sl_io_async_thread_portable_pt const thread, mk_sl_io_async_writer_file_portable_pt const writer, mk_sl_io_async_writer_file_iorp_portable_pt const iorp) mk_lang_noexcept;
mk_lang_nodiscard mk_lang_jumbo mk_lang_types_sint_t mk_sl_io_async_thread_portable_poke(mk_sl_io_async_thread_portable_pt const thread) mk_lang_noexcept;
mk_lang_nodiscard mk_lang_jumbo mk_lang_types_sint_t mk_sl_io_async_thread_portable_flush(mk_sl_io_async_thread_portable_pt const thread) mk_lang_noexcept;
mk_lang_nodiscard mk_lang_jumbo mk_lang_types_sint_t mk_sl_io_async_thread_portable_join(mk_sl_io_async_thread_portable_pt const thread) mk_lang_noexcept;
mk_lang_nodiscard mk_lang_jumbo mk_lang_types_sint_t mk_sl_io_async_thread_portable_destroy(mk_sl_io_async_thread_portable_pt const thread) mk_lang_noexcept;


#if mk_lang_jumbo_want == 1
#include "mk_sl_io_async_thread_portable.c"
#endif
#endif
