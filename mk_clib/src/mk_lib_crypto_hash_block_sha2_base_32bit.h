#ifndef mk_include_guard_mk_lib_crypto_hash_block_sha2_base_32bit
#define mk_include_guard_mk_lib_crypto_hash_block_sha2_base_32bit


#include "mk_lang_constexpr.h"
#include "mk_lang_jumbo.h"
#include "mk_lang_noexcept.h"
#include "mk_lang_types.h"
#include "mk_lib_crypto_hash_block_sha2_c_base_32bit.h"
#include "mk_lib_crypto_hash_block_sha2_x86_base_32bit.h"


#define mk_lib_crypto_hash_block_sha2_base_32bit_block_len 64
#define mk_lib_crypto_hash_block_sha2_base_32bit_digest_len 32


union mk_lib_crypto_hash_block_sha2_base_32bit_data_u
{
	mk_lib_crypto_hash_block_sha2_c_base_32bit_t m_sha2_c_base_32bit;
	mk_lib_crypto_hash_block_sha2_x86_base_32bit_t m_sha2_x86_base_32bit;
};
typedef union mk_lib_crypto_hash_block_sha2_base_32bit_data_u mk_lib_crypto_hash_block_sha2_base_32bit_data_t;

struct mk_lib_crypto_hash_block_sha2_base_32bit_s
{
	mk_lib_crypto_hash_block_sha2_base_32bit_data_t m_data;
};
typedef struct mk_lib_crypto_hash_block_sha2_base_32bit_s mk_lib_crypto_hash_block_sha2_base_32bit_t;
typedef mk_lib_crypto_hash_block_sha2_base_32bit_t const mk_lib_crypto_hash_block_sha2_base_32bit_ct;
typedef mk_lib_crypto_hash_block_sha2_base_32bit_t* mk_lib_crypto_hash_block_sha2_base_32bit_pt;
typedef mk_lib_crypto_hash_block_sha2_base_32bit_t const* mk_lib_crypto_hash_block_sha2_base_32bit_pct;

typedef mk_lib_crypto_hash_block_sha2_c_base_32bit_block_t mk_lib_crypto_hash_block_sha2_base_32bit_block_t;
typedef mk_lib_crypto_hash_block_sha2_base_32bit_block_t const mk_lib_crypto_hash_block_sha2_base_32bit_block_ct;
typedef mk_lib_crypto_hash_block_sha2_base_32bit_block_t* mk_lib_crypto_hash_block_sha2_base_32bit_block_pt;
typedef mk_lib_crypto_hash_block_sha2_base_32bit_block_t const* mk_lib_crypto_hash_block_sha2_base_32bit_block_pct;

typedef mk_lib_crypto_hash_block_sha2_c_base_32bit_digest_t mk_lib_crypto_hash_block_sha2_base_32bit_digest_t;
typedef mk_lib_crypto_hash_block_sha2_base_32bit_digest_t const mk_lib_crypto_hash_block_sha2_base_32bit_digest_ct;
typedef mk_lib_crypto_hash_block_sha2_base_32bit_digest_t* mk_lib_crypto_hash_block_sha2_base_32bit_digest_pt;
typedef mk_lib_crypto_hash_block_sha2_base_32bit_digest_t const* mk_lib_crypto_hash_block_sha2_base_32bit_digest_pct;


mk_lang_constexpr mk_lang_jumbo mk_lang_types_void_t mk_lib_crypto_hash_block_sha2_base_32bit_init(mk_lib_crypto_hash_block_sha2_base_32bit_pt const sha2_base_32bit, mk_sl_cui_uint32_pct const iv) mk_lang_noexcept;
mk_lang_constexpr mk_lang_jumbo mk_lang_types_void_t mk_lib_crypto_hash_block_sha2_base_32bit_append_blocks(mk_lib_crypto_hash_block_sha2_base_32bit_pt const sha2_base_32bit, mk_lib_crypto_hash_block_sha2_base_32bit_block_pct const pblocks, mk_lang_types_usize_t const nblocks) mk_lang_noexcept;
mk_lang_constexpr mk_lang_jumbo mk_lang_types_void_t mk_lib_crypto_hash_block_sha2_base_32bit_finish(mk_lib_crypto_hash_block_sha2_base_32bit_pt const sha2_base_32bit, mk_lib_crypto_hash_block_sha2_base_32bit_block_pt const block, int const idx, mk_lib_crypto_hash_block_sha2_base_32bit_digest_pt const digest) mk_lang_noexcept;


#if mk_lang_jumbo_want == 1
#include "mk_lib_crypto_hash_block_sha2_base_32bit.c"
#endif
#endif
