#include "mk_lang_exception.h"
#include "mk_lang_jumbo.h"
#include "mk_lang_nodiscard.h"
#include "mk_lang_noexcept.h"
#include "mk_lang_types.h"


#include "mk_sl_vector_inl_defd.h"


struct mk_sl_vector_inl_defd_vector_s
{
	mk_sl_vector_inl_defd_buffer_t m_buffer;
	mk_lang_types_usize_t m_count;
};
typedef struct mk_sl_vector_inl_defd_vector_s mk_sl_vector_inl_defd_vector_t;
typedef mk_sl_vector_inl_defd_vector_t const mk_sl_vector_inl_defd_vector_ct;
typedef mk_sl_vector_inl_defd_vector_t* mk_sl_vector_inl_defd_vector_pt;
typedef mk_sl_vector_inl_defd_vector_t const* mk_sl_vector_inl_defd_vector_pct;


mk_lang_jumbo void mk_sl_vector_inl_defd_vector_ro_destroy(mk_sl_vector_inl_defd_vector_pct const vector) mk_lang_noexcept;
mk_lang_nodiscard mk_lang_jumbo mk_lang_types_bool_t mk_sl_vector_inl_defd_vector_ro_is_empty(mk_sl_vector_inl_defd_vector_pct const vector) mk_lang_noexcept;
mk_lang_nodiscard mk_lang_jumbo mk_lang_types_usize_t mk_sl_vector_inl_defd_vector_ro_get_count(mk_sl_vector_inl_defd_vector_pct const vector) mk_lang_noexcept;
mk_lang_nodiscard mk_lang_jumbo mk_lang_types_usize_t mk_sl_vector_inl_defd_vector_ro_get_capacity(mk_sl_vector_inl_defd_vector_pct const vector) mk_lang_noexcept;
mk_lang_nodiscard mk_lang_jumbo mk_sl_vector_inl_defd_elem_pct mk_sl_vector_inl_defd_vector_ro_get_data(mk_sl_vector_inl_defd_vector_pct const vector) mk_lang_noexcept;
mk_lang_nodiscard mk_lang_jumbo mk_sl_vector_inl_defd_elem_pct mk_sl_vector_inl_defd_vector_ro_get_data_at(mk_sl_vector_inl_defd_vector_pct const vector, mk_lang_types_usize_t const idx) mk_lang_noexcept;
mk_lang_nodiscard mk_lang_jumbo mk_sl_vector_inl_defd_elem_pct mk_sl_vector_inl_defd_vector_ro_get_data_back(mk_sl_vector_inl_defd_vector_pct const vector) mk_lang_noexcept;

mk_lang_jumbo void mk_sl_vector_inl_defd_vector_rw_destroy(mk_sl_vector_inl_defd_vector_pt const vector) mk_lang_noexcept;
mk_lang_nodiscard mk_lang_jumbo mk_lang_types_bool_t mk_sl_vector_inl_defd_vector_rw_is_empty(mk_sl_vector_inl_defd_vector_pt const vector) mk_lang_noexcept;
mk_lang_nodiscard mk_lang_jumbo mk_lang_types_usize_t mk_sl_vector_inl_defd_vector_rw_get_count(mk_sl_vector_inl_defd_vector_pt const vector) mk_lang_noexcept;
mk_lang_nodiscard mk_lang_jumbo mk_lang_types_usize_t mk_sl_vector_inl_defd_vector_rw_get_capacity(mk_sl_vector_inl_defd_vector_pt const vector) mk_lang_noexcept;
mk_lang_nodiscard mk_lang_jumbo mk_sl_vector_inl_defd_elem_pt mk_sl_vector_inl_defd_vector_rw_get_data(mk_sl_vector_inl_defd_vector_pt const vector) mk_lang_noexcept;
mk_lang_nodiscard mk_lang_jumbo mk_sl_vector_inl_defd_elem_pt mk_sl_vector_inl_defd_vector_rw_get_data_at(mk_sl_vector_inl_defd_vector_pt const vector, mk_lang_types_usize_t const idx) mk_lang_noexcept;
mk_lang_nodiscard mk_lang_jumbo mk_sl_vector_inl_defd_elem_pt mk_sl_vector_inl_defd_vector_rw_get_data_back(mk_sl_vector_inl_defd_vector_pt const vector) mk_lang_noexcept;

mk_lang_jumbo void mk_sl_vector_inl_defd_vector_rw_construct(mk_sl_vector_inl_defd_vector_pt const vector) mk_lang_noexcept;
mk_lang_jumbo void mk_sl_vector_inl_defd_vector_rw_reserve(mk_sl_vector_inl_defd_vector_pt const vector, mk_lang_exception_pt const ex, mk_lang_types_usize_t const count) mk_lang_noexcept;
mk_lang_jumbo void mk_sl_vector_inl_defd_vector_rw_resize(mk_sl_vector_inl_defd_vector_pt const vector, mk_lang_exception_pt const ex, mk_lang_types_usize_t const count) mk_lang_noexcept;
mk_lang_jumbo void mk_sl_vector_inl_defd_vector_rw_push_back(mk_sl_vector_inl_defd_vector_pt const vector, mk_lang_exception_pt const ex, mk_sl_vector_inl_defd_elem_pct const elem) mk_lang_noexcept;
mk_lang_jumbo void mk_sl_vector_inl_defd_vector_rw_clear(mk_sl_vector_inl_defd_vector_pt const vector) mk_lang_noexcept;
mk_lang_jumbo void mk_sl_vector_inl_defd_vector_rw_push_back_from_capacity_one(mk_sl_vector_inl_defd_vector_pt const vector) mk_lang_noexcept;
mk_lang_jumbo void mk_sl_vector_inl_defd_vector_rw_push_back_from_capacity_n(mk_sl_vector_inl_defd_vector_pt const vector, mk_lang_types_usize_t const count) mk_lang_noexcept;
mk_lang_jumbo void mk_sl_vector_inl_defd_vector_rw_pop_back_one(mk_sl_vector_inl_defd_vector_pt const vector) mk_lang_noexcept;
mk_lang_jumbo void mk_sl_vector_inl_defd_vector_rw_pop_back_n(mk_sl_vector_inl_defd_vector_pt const vector, mk_lang_types_usize_t const count) mk_lang_noexcept;

mk_lang_nodiscard mk_lang_jumbo mk_lang_types_bool_t mk_sl_vector_inl_defd_vector_pr_check_invariants(mk_sl_vector_inl_defd_vector_pct const vector) mk_lang_noexcept;


#include "mk_sl_vector_inl_defu.h"
